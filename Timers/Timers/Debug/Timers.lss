
Timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000dc  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000008a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000329  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000099  00000000  00000000  00000c51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000291  00000000  00000000  00000cea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000a5  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000020  00000000  00000000  00001045  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ed       	ldi	r30, 0xDC	; 220
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <avr/io.h>

int main(void)
{
	uint8_t counter = 0;
	DDRD = 0b11100000 ;
  92:	80 ee       	ldi	r24, 0xE0	; 224
  94:	81 bb       	out	0x11, r24	; 17
	// toggle three leds every 100 ms
	   // timer configuration
	    //for 1 ms
		//timer mode : Normal
		TCCR0 &=~ (1U << WGM00);
  96:	83 b7       	in	r24, 0x33	; 51
  98:	8f 7b       	andi	r24, 0xBF	; 191
  9a:	83 bf       	out	0x33, r24	; 51
		TCCR0 &=~ (1U << WGM01); 
  9c:	83 b7       	in	r24, 0x33	; 51
  9e:	87 7f       	andi	r24, 0xF7	; 247
  a0:	83 bf       	out	0x33, r24	; 51
	   // counts : 125
	   // timer start counts from 256-125
	   TCNT0 = -125 ;
  a2:	83 e8       	ldi	r24, 0x83	; 131
  a4:	82 bf       	out	0x32, r24	; 50
	   // prescaler : /8 >> In AVR: prescaler make enable of timer so that it is the Last Step
	   TCCR0 &=~ (1U << CS00);
  a6:	83 b7       	in	r24, 0x33	; 51
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	83 bf       	out	0x33, r24	; 51
	   TCCR0 |=  (1U << CS01);
  ac:	83 b7       	in	r24, 0x33	; 51
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	83 bf       	out	0x33, r24	; 51
	   TCCR0 &=~ (1U << CS02);
  b2:	83 b7       	in	r24, 0x33	; 51
  b4:	8b 7f       	andi	r24, 0xFB	; 251
  b6:	83 bf       	out	0x33, r24	; 51


#include <avr/io.h>

int main(void)
{
  b8:	34 e6       	ldi	r19, 0x64	; 100
    {
        //check on timer overflow flag
		if ((TIFR & (1U << TOV0)) == (1U << TOV0))
		{
			// reset timer counts to 256-125
			TCNT0 = -125 ;
  ba:	23 e8       	ldi	r18, 0x83	; 131


#include <avr/io.h>

int main(void)
{
  bc:	83 2f       	mov	r24, r19
	   TCCR0 &=~ (1U << CS02);
	
    while(1)
    {
        //check on timer overflow flag
		if ((TIFR & (1U << TOV0)) == (1U << TOV0))
  be:	08 b6       	in	r0, 0x38	; 56
  c0:	00 fe       	sbrs	r0, 0
  c2:	fd cf       	rjmp	.-6      	; 0xbe <main+0x2c>
		{
			// reset timer counts to 256-125
			TCNT0 = -125 ;
  c4:	22 bf       	out	0x32, r18	; 50
			//clear timer overflow flag
			TIFR |= (1U << TOV0);
  c6:	98 b7       	in	r25, 0x38	; 56
  c8:	91 60       	ori	r25, 0x01	; 1
  ca:	98 bf       	out	0x38, r25	; 56
  cc:	81 50       	subi	r24, 0x01	; 1
			counter++ ;
			//check if counter == 100
			if (counter == 100)
  ce:	b9 f7       	brne	.-18     	; 0xbe <main+0x2c>
			{
				//reset counter
				counter = 0;
				//toggle the leds
				PORTD ^= 0xFF ;
  d0:	82 b3       	in	r24, 0x12	; 18
  d2:	80 95       	com	r24
  d4:	82 bb       	out	0x12, r24	; 18
  d6:	f2 cf       	rjmp	.-28     	; 0xbc <main+0x2a>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
