
LCDTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000156  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000156  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000930  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000665  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ed  00000000  00000000  00001035  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b6  00000000  00000000  00001222  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  000015d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000143  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c1  00000000  00000000  000017a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  8a:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <vLcdCommand>:
	
}
void vLcdCommand (unsigned char cmd)
{
   // send command to data port
	LCD_DATA_PORT = cmd;
  92:	8b bb       	out	0x1b, r24	; 27
   // reset RS=0 to select command mode
    LCD_RS_CTRL &=~ (1U << LCD_RS);
  94:	c2 98       	cbi	0x18, 2	; 24
   // reset RW=0 to select write
   LCD_RW_CTRL &=~ (1U << LCD_RW);
  96:	c1 98       	cbi	0x18, 1	; 24
   // set   EN=1 to Received command from low to high (latch)
   LCD_RS_CTRL |= (1U << LCD_EN);	
  98:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	8f e0       	ldi	r24, 0x0F	; 15
  9c:	97 e2       	ldi	r25, 0x27	; 39
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <vLcdCommand+0xc>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <vLcdCommand+0x12>
  a4:	00 00       	nop
   _delay_ms(40);
   // reset   EN=0 to Execute command from high to low 
   LCD_RS_CTRL &=~ (1U << LCD_EN);
  a6:	c0 98       	cbi	0x18, 0	; 24
  a8:	87 ea       	ldi	r24, 0xA7	; 167
  aa:	91 e6       	ldi	r25, 0x61	; 97
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <vLcdCommand+0x1a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <vLcdCommand+0x20>
  b2:	00 00       	nop
   _delay_ms(100);
}
  b4:	08 95       	ret

000000b6 <vLcdInit>:
#include<util/delay.h>

void vLcdInit ()
{
  //set data port as output
	LCD_DATA_DIR = 0xFF;           
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	8a bb       	out	0x1a, r24	; 26
  //set control port as output
	LCD_EN_DIR   |= 1U << LCD_EN;  
  ba:	b8 9a       	sbi	0x17, 0	; 23
	LCD_RW_DIR   |= 1U << LCD_RW;
  bc:	b9 9a       	sbi	0x17, 1	; 23
	LCD_RS_DIR   |= 1U << LCD_RS;
  be:	ba 9a       	sbi	0x17, 2	; 23
  // Reset EN = 0
    LCD_EN_CTRL  &=~ (1U << LCD_EN) ;  
  c0:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	83 ef       	ldi	r24, 0xF3	; 243
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <vLcdInit+0x10>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <vLcdInit+0x16>
  cc:	00 00       	nop
  // wait for init
  _delay_us(2000);   
  vLcdCommand(0x38);
  ce:	88 e3       	ldi	r24, 0x38	; 56
  d0:	0e 94 49 00 	call	0x92	; 0x92 <vLcdCommand>
  vLcdCommand(0x0E);
  d4:	8e e0       	ldi	r24, 0x0E	; 14
  d6:	0e 94 49 00 	call	0x92	; 0x92 <vLcdCommand>
  vLcdCommand(0x01);
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	0e 94 49 00 	call	0x92	; 0x92 <vLcdCommand>
  e0:	83 ef       	ldi	r24, 0xF3	; 243
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <vLcdInit+0x2e>
  e8:	00 c0       	rjmp	.+0      	; 0xea <vLcdInit+0x34>
  ea:	00 00       	nop
  _delay_us(2000);
  vLcdCommand(0x06);
  ec:	86 e0       	ldi	r24, 0x06	; 6
  ee:	0e 94 49 00 	call	0x92	; 0x92 <vLcdCommand>
	
}
  f2:	08 95       	ret

000000f4 <vLcdData>:

void vLcdData (unsigned char data)
{
	
	 // send data to data port
	 LCD_DATA_PORT = data;
  f4:	8b bb       	out	0x1b, r24	; 27
	 // set RS=1 to select data mode
	 LCD_RS_CTRL |= (1U << LCD_RS);
  f6:	c2 9a       	sbi	0x18, 2	; 24
	 // reset RW=0 to select write
	 LCD_RW_CTRL &=~ (1U << LCD_RW);
  f8:	c1 98       	cbi	0x18, 1	; 24
	 // set   EN=1 to Received command from low to high (latch)
	 LCD_RS_CTRL |= (1U << LCD_EN);
  fa:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	8f e0       	ldi	r24, 0x0F	; 15
  fe:	97 e2       	ldi	r25, 0x27	; 39
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <vLcdData+0xc>
 104:	00 c0       	rjmp	.+0      	; 0x106 <vLcdData+0x12>
 106:	00 00       	nop
	 _delay_ms(40);
	 // reset   EN=0 to Execute command from high to low
	 LCD_RS_CTRL &=~ (1U << LCD_EN);
 108:	c0 98       	cbi	0x18, 0	; 24
 10a:	87 ea       	ldi	r24, 0xA7	; 167
 10c:	91 e6       	ldi	r25, 0x61	; 97
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <vLcdData+0x1a>
 112:	00 c0       	rjmp	.+0      	; 0x114 <vLcdData+0x20>
 114:	00 00       	nop
	 _delay_ms(100);
}
 116:	08 95       	ret

00000118 <vLcdPrint>:

void vLcdPrint(char * str)
{
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	8c 01       	movw	r16, r24
	unsigned char i = 0;
	while (str[i] != 0)
 120:	fc 01       	movw	r30, r24
 122:	80 81       	ld	r24, Z
 124:	88 23       	and	r24, r24
 126:	51 f0       	breq	.+20     	; 0x13c <vLcdPrint+0x24>
	 _delay_ms(100);
}

void vLcdPrint(char * str)
{
	unsigned char i = 0;
 128:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[i] != 0)
	{
		vLcdData(str[i]);
 12a:	0e 94 7a 00 	call	0xf4	; 0xf4 <vLcdData>
		i++;
 12e:	cf 5f       	subi	r28, 0xFF	; 255
}

void vLcdPrint(char * str)
{
	unsigned char i = 0;
	while (str[i] != 0)
 130:	f8 01       	movw	r30, r16
 132:	ec 0f       	add	r30, r28
 134:	f1 1d       	adc	r31, r1
 136:	80 81       	ld	r24, Z
 138:	88 23       	and	r24, r24
 13a:	b9 f7       	brne	.-18     	; 0x12a <vLcdPrint+0x12>
	{
		vLcdData(str[i]);
		i++;
	}
 13c:	cf 91       	pop	r28
 13e:	1f 91       	pop	r17
 140:	0f 91       	pop	r16
 142:	08 95       	ret

00000144 <main>:
#define F_CPU 8000000UL
#include<util/delay.h>

int main(void)
{
	vLcdInit ();
 144:	0e 94 5b 00 	call	0xb6	; 0xb6 <vLcdInit>
	//vLcdData('A');
		vLcdPrint("ALLAH AKBER");
 148:	80 e6       	ldi	r24, 0x60	; 96
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 8c 00 	call	0x118	; 0x118 <vLcdPrint>
 150:	ff cf       	rjmp	.-2      	; 0x150 <main+0xc>

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
