
LCDTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000286  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000286  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000306  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d02  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000756  00000000  00000000  000010ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004fc  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00001d40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ef  00000000  00000000  00001e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000696  00000000  00000000  00002223  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000028b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e8       	ldi	r30, 0x86	; 134
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 01 01 	call	0x202	; 0x202 <main>
  7a:	0c 94 41 01 	jmp	0x282	; 0x282 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <vLcdCommand>:
{
	char str[7];
	sprintf(str,"%d",Number); // Adjust the formatting to your liking
	vLcdPrint(str);
	
}
  82:	98 2f       	mov	r25, r24
  84:	90 7f       	andi	r25, 0xF0	; 240
  86:	9b bb       	out	0x1b, r25	; 27
  88:	c1 98       	cbi	0x18, 1	; 24
  8a:	c2 98       	cbi	0x18, 2	; 24
  8c:	c3 9a       	sbi	0x18, 3	; 24
  8e:	ef e5       	ldi	r30, 0x5F	; 95
  90:	fa ee       	ldi	r31, 0xEA	; 234
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <vLcdCommand+0x10>
  96:	00 c0       	rjmp	.+0      	; 0x98 <vLcdCommand+0x16>
  98:	00 00       	nop
  9a:	c3 98       	cbi	0x18, 3	; 24
  9c:	ef e5       	ldi	r30, 0x5F	; 95
  9e:	fa ee       	ldi	r31, 0xEA	; 234
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <vLcdCommand+0x1e>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <vLcdCommand+0x24>
  a6:	00 00       	nop
  a8:	82 95       	swap	r24
  aa:	80 7f       	andi	r24, 0xF0	; 240
  ac:	8b bb       	out	0x1b, r24	; 27
  ae:	c3 9a       	sbi	0x18, 3	; 24
  b0:	8f e5       	ldi	r24, 0x5F	; 95
  b2:	9a ee       	ldi	r25, 0xEA	; 234
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <vLcdCommand+0x32>
  b8:	00 c0       	rjmp	.+0      	; 0xba <vLcdCommand+0x38>
  ba:	00 00       	nop
  bc:	c3 98       	cbi	0x18, 3	; 24
  be:	ef e5       	ldi	r30, 0x5F	; 95
  c0:	fa ee       	ldi	r31, 0xEA	; 234
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <vLcdCommand+0x40>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <vLcdCommand+0x46>
  c8:	00 00       	nop
  ca:	08 95       	ret

000000cc <vLcdData>:
  cc:	98 2f       	mov	r25, r24
  ce:	90 7f       	andi	r25, 0xF0	; 240
  d0:	9b bb       	out	0x1b, r25	; 27
  d2:	c1 9a       	sbi	0x18, 1	; 24
  d4:	c2 98       	cbi	0x18, 2	; 24
  d6:	c3 9a       	sbi	0x18, 3	; 24
  d8:	ef e5       	ldi	r30, 0x5F	; 95
  da:	fa ee       	ldi	r31, 0xEA	; 234
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <vLcdData+0x10>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <vLcdData+0x16>
  e2:	00 00       	nop
  e4:	c3 98       	cbi	0x18, 3	; 24
  e6:	ef e5       	ldi	r30, 0x5F	; 95
  e8:	fa ee       	ldi	r31, 0xEA	; 234
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <vLcdData+0x1e>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <vLcdData+0x24>
  f0:	00 00       	nop
  f2:	82 95       	swap	r24
  f4:	80 7f       	andi	r24, 0xF0	; 240
  f6:	8b bb       	out	0x1b, r24	; 27
  f8:	c3 9a       	sbi	0x18, 3	; 24
  fa:	8f e5       	ldi	r24, 0x5F	; 95
  fc:	9a ee       	ldi	r25, 0xEA	; 234
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <vLcdData+0x32>
 102:	00 c0       	rjmp	.+0      	; 0x104 <vLcdData+0x38>
 104:	00 00       	nop
 106:	c3 98       	cbi	0x18, 3	; 24
 108:	ef e5       	ldi	r30, 0x5F	; 95
 10a:	fa ee       	ldi	r31, 0xEA	; 234
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <vLcdData+0x40>
 110:	00 c0       	rjmp	.+0      	; 0x112 <vLcdData+0x46>
 112:	00 00       	nop
 114:	08 95       	ret

00000116 <vLcdPrint>:
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	fc 01       	movw	r30, r24
 11e:	80 81       	ld	r24, Z
 120:	88 23       	and	r24, r24
 122:	59 f0       	breq	.+22     	; 0x13a <vLcdPrint+0x24>
 124:	8f 01       	movw	r16, r30
 126:	c0 e0       	ldi	r28, 0x00	; 0
 128:	0e 94 66 00 	call	0xcc	; 0xcc <vLcdData>
 12c:	cf 5f       	subi	r28, 0xFF	; 255
 12e:	f8 01       	movw	r30, r16
 130:	ec 0f       	add	r30, r28
 132:	f1 1d       	adc	r31, r1
 134:	80 81       	ld	r24, Z
 136:	81 11       	cpse	r24, r1
 138:	f7 cf       	rjmp	.-18     	; 0x128 <vLcdPrint+0x12>
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	0f 91       	pop	r16
 140:	08 95       	ret

00000142 <vLcdInit>:
 142:	8f e5       	ldi	r24, 0x5F	; 95
 144:	9a ee       	ldi	r25, 0xEA	; 234
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <vLcdInit+0x4>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <vLcdInit+0xa>
 14c:	00 00       	nop
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	8a bb       	out	0x1a, r24	; 26
 152:	bb 9a       	sbi	0x17, 3	; 23
 154:	ba 9a       	sbi	0x17, 2	; 23
 156:	b9 9a       	sbi	0x17, 1	; 23
 158:	c3 98       	cbi	0x18, 3	; 24
 15a:	9f eb       	ldi	r25, 0xBF	; 191
 15c:	24 ed       	ldi	r18, 0xD4	; 212
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	91 50       	subi	r25, 0x01	; 1
 162:	20 40       	sbci	r18, 0x00	; 0
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <vLcdInit+0x1e>
 168:	00 c0       	rjmp	.+0      	; 0x16a <vLcdInit+0x28>
 16a:	00 00       	nop
 16c:	83 e3       	ldi	r24, 0x33	; 51
 16e:	0e 94 41 00 	call	0x82	; 0x82 <vLcdCommand>
 172:	82 e3       	ldi	r24, 0x32	; 50
 174:	0e 94 41 00 	call	0x82	; 0x82 <vLcdCommand>
 178:	88 e2       	ldi	r24, 0x28	; 40
 17a:	0e 94 41 00 	call	0x82	; 0x82 <vLcdCommand>
 17e:	8e e0       	ldi	r24, 0x0E	; 14
 180:	0e 94 41 00 	call	0x82	; 0x82 <vLcdCommand>
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	0e 94 41 00 	call	0x82	; 0x82 <vLcdCommand>
 18a:	9f eb       	ldi	r25, 0xBF	; 191
 18c:	24 ed       	ldi	r18, 0xD4	; 212
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	91 50       	subi	r25, 0x01	; 1
 192:	20 40       	sbci	r18, 0x00	; 0
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <vLcdInit+0x4e>
 198:	00 c0       	rjmp	.+0      	; 0x19a <vLcdInit+0x58>
 19a:	00 00       	nop
 19c:	86 e0       	ldi	r24, 0x06	; 6
 19e:	0e 94 41 00 	call	0x82	; 0x82 <vLcdCommand>
 1a2:	9f eb       	ldi	r25, 0xBF	; 191
 1a4:	24 ed       	ldi	r18, 0xD4	; 212
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	91 50       	subi	r25, 0x01	; 1
 1aa:	20 40       	sbci	r18, 0x00	; 0
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <vLcdInit+0x66>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <vLcdInit+0x70>
 1b2:	00 00       	nop
 1b4:	08 95       	ret

000001b6 <vLCD_Integer>:

void vLCD_Integer(uint16_t data)
// displays the integer value of DATA at current LCD cursor position
{
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	60 97       	sbiw	r28, 0x10	; 16
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	cd bf       	out	0x3d, r28	; 61
	char str[16] = "";// save enough space for result
 1ca:	1a 82       	std	Y+2, r1	; 0x02
 1cc:	19 82       	std	Y+1, r1	; 0x01
 1ce:	fe 01       	movw	r30, r28
 1d0:	33 96       	adiw	r30, 0x03	; 3
 1d2:	2e e0       	ldi	r18, 0x0E	; 14
 1d4:	df 01       	movw	r26, r30
 1d6:	1d 92       	st	X+, r1
 1d8:	2a 95       	dec	r18
 1da:	e9 f7       	brne	.-6      	; 0x1d6 <vLCD_Integer+0x20>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1dc:	4a e0       	ldi	r20, 0x0A	; 10
 1de:	be 01       	movw	r22, r28
 1e0:	6f 5f       	subi	r22, 0xFF	; 255
 1e2:	7f 4f       	sbci	r23, 0xFF	; 255
 1e4:	0e 94 0c 01 	call	0x218	; 0x218 <__itoa_ncheck>
	itoa(data,str,10);//convert to ascii
	vLcdPrint(str);// display in on LCD
 1e8:	ce 01       	movw	r24, r28
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	0e 94 8b 00 	call	0x116	; 0x116 <vLcdPrint>
 1f0:	60 96       	adiw	r28, 0x10	; 16
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	f8 94       	cli
 1f6:	de bf       	out	0x3e, r29	; 62
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	cd bf       	out	0x3d, r28	; 61
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <main>:

int main(void)
{
	uint16_t x =1230 ;
	uint16_t y =4500 ;
	vLcdInit ();
 202:	0e 94 a1 00 	call	0x142	; 0x142 <vLcdInit>
	vLcdPrint("ALLAH AKBER");
 206:	80 e6       	ldi	r24, 0x60	; 96
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 8b 00 	call	0x116	; 0x116 <vLcdPrint>
	//vLcdDisplayNumber(x);
	vLCD_Integer(y);
 20e:	84 e9       	ldi	r24, 0x94	; 148
 210:	91 e1       	ldi	r25, 0x11	; 17
 212:	0e 94 db 00 	call	0x1b6	; 0x1b6 <vLCD_Integer>
 216:	ff cf       	rjmp	.-2      	; 0x216 <main+0x14>

00000218 <__itoa_ncheck>:
 218:	bb 27       	eor	r27, r27
 21a:	4a 30       	cpi	r20, 0x0A	; 10
 21c:	31 f4       	brne	.+12     	; 0x22a <__itoa_ncheck+0x12>
 21e:	99 23       	and	r25, r25
 220:	22 f4       	brpl	.+8      	; 0x22a <__itoa_ncheck+0x12>
 222:	bd e2       	ldi	r27, 0x2D	; 45
 224:	90 95       	com	r25
 226:	81 95       	neg	r24
 228:	9f 4f       	sbci	r25, 0xFF	; 255
 22a:	0c 94 18 01 	jmp	0x230	; 0x230 <__utoa_common>

0000022e <__utoa_ncheck>:
 22e:	bb 27       	eor	r27, r27

00000230 <__utoa_common>:
 230:	fb 01       	movw	r30, r22
 232:	55 27       	eor	r21, r21
 234:	aa 27       	eor	r26, r26
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	aa 1f       	adc	r26, r26
 23c:	a4 17       	cp	r26, r20
 23e:	10 f0       	brcs	.+4      	; 0x244 <__utoa_common+0x14>
 240:	a4 1b       	sub	r26, r20
 242:	83 95       	inc	r24
 244:	50 51       	subi	r21, 0x10	; 16
 246:	b9 f7       	brne	.-18     	; 0x236 <__utoa_common+0x6>
 248:	a0 5d       	subi	r26, 0xD0	; 208
 24a:	aa 33       	cpi	r26, 0x3A	; 58
 24c:	08 f0       	brcs	.+2      	; 0x250 <__utoa_common+0x20>
 24e:	a9 5d       	subi	r26, 0xD9	; 217
 250:	a1 93       	st	Z+, r26
 252:	00 97       	sbiw	r24, 0x00	; 0
 254:	79 f7       	brne	.-34     	; 0x234 <__utoa_common+0x4>
 256:	b1 11       	cpse	r27, r1
 258:	b1 93       	st	Z+, r27
 25a:	11 92       	st	Z+, r1
 25c:	cb 01       	movw	r24, r22
 25e:	0c 94 31 01 	jmp	0x262	; 0x262 <strrev>

00000262 <strrev>:
 262:	dc 01       	movw	r26, r24
 264:	fc 01       	movw	r30, r24
 266:	67 2f       	mov	r22, r23
 268:	71 91       	ld	r23, Z+
 26a:	77 23       	and	r23, r23
 26c:	e1 f7       	brne	.-8      	; 0x266 <strrev+0x4>
 26e:	32 97       	sbiw	r30, 0x02	; 2
 270:	04 c0       	rjmp	.+8      	; 0x27a <strrev+0x18>
 272:	7c 91       	ld	r23, X
 274:	6d 93       	st	X+, r22
 276:	70 83       	st	Z, r23
 278:	62 91       	ld	r22, -Z
 27a:	ae 17       	cp	r26, r30
 27c:	bf 07       	cpc	r27, r31
 27e:	c8 f3       	brcs	.-14     	; 0x272 <strrev+0x10>
 280:	08 95       	ret

00000282 <_exit>:
 282:	f8 94       	cli

00000284 <__stop_program>:
 284:	ff cf       	rjmp	.-2      	; 0x284 <__stop_program>
